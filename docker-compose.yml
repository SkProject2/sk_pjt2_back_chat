version: "3.7"
networks:
  chat_server:
    driver: bridge

volumes:
  mysql:
  mongo:

services:
  ##########################################################
  zookeeper:
    image: "confluentinc/cp-zookeeper:latest"
    environment:
      # Zookeeper가 클라이언트(예: Kafka Broker)와 통신하는 포트
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - chat_server

  ##########################################################
  kafka:
    image: "confluentinc/cp-kafka:latest"
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      # Kafka 브로커(서버)마다 고유한 ID를 설정
      # 여러 개의 Kafka 브로커를 실행할 경우, 각 브로커마다 다른 ID를 설정
      # 브로커 ID로 1로 설정
      KAFKA_BROKER_ID: 1

      # Kafka가 Zookeeper와 연결할 주소를 설정
      # Docker Compose 네트워크 내에서 Zookeeper 컨테이너를 찾는 주소
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

      # Kafka가 클라이언트(Producer, Consumer)와 통신할 수 있도록 외부에 공개하는 주소
      # PLAINTEXT: 암호화되지 않은 통신 방식 (기본 프로토콜)
      # localhost:9092: Kafka가 클라이언트에게 노출하는 호스트와 포트
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092

      # Consumer의 오프셋(Offset)을 저장하는 전용 토픽을 사용
      # Offset을 저장하는 토픽의 복제본(replica) 개수를 설정
      # 값이 1이면 단일 브로커에서만 오프셋을 저장하므로, 브로커 장애 시 데이터 손실 위험이 있음.
      # 클러스터 환경에서는 최소 2 또는 3 이상으로 설정하는 것이 좋음
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    restart: always
    networks:
      - chat_server

  ##########################################################
  mongodb:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    networks:
      - chat_server
    volumes:
      - mongo:/var/lib/mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootuser
      - MONGO_INITDB_ROOT_PASSWORD=rootpass

  ##########################################################
  redis:
    image: redis:7-alpine        # 가벼운 Alpine 리눅스 기반 Redis 7 이미지
    restart: always
    ports:
      - "6379:6379"             # Redis 기본 포트
    networks:
      - chat_server

  ##########################################################
  #                   RDS로 대체
  mysql:
    image: mysql              # 이미지명, docker.hun에서 설치
    restart: always           # 비정상적으로 서비스가 죽으면 재가동
    environment:
      - MYSQL_ROOT_PASSWORD=p1234  # root pw
      - MYSQL_DATABASE=sk_pjt2_chat       # 초기 db명
      - MYSQL_USER=guest          # 유저 id
      - MYSQL_PASSWORD=p1234       # 유저 pw
    volumes:
      - mysql:/var/lib/mysql # DB컨테이너가 삭제되어도 데이터 유지
    ports:
      - "3306:3306"         # 외부 : 내부 port 지정
    networks:
      - chat_server    # 위에서 만든 네트워크로 지정
    command:
      --bind-address=0.0.0.0    # 모든 IP에서 접근 가능(생략가능)
